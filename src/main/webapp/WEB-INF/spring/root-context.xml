<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<!-- JDBC 기반 Transaction Manager 설정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"/>
	
	<!-- Database 연동 -->
	<context:property-placeholder location="classpath:config/oracle_jdbc.properties"/>
	
	<!-- Connectio Pool을 이용한 DataSource 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${oracle.classname}"/>
		<property name="url" value="${oracle.url}"/>
		<property name="username" value="${oracle.username}"/>
		<property name="password" value="${oracle.password}"/>
		<!-- Max Connection -->
		<property name="maxActive" value="200"/>
		<!-- 접속이 없을 경우 최대 유지 Connection -->
		<property name="maxIdle" value="100"/>
		<!-- 최대 대기시간(초) : 초과시 연결 실패 오류 발생 -->
		<property name="maxWait" value="10"/>
	</bean>
	
	<!-- 선언적 트랜잭션 처리 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 아래 속성 태그를 이용해 어느 메서드에 트랜잭션을 적용할 것인지 선택가능 -->
		<!-- tx:method의 속성
			 1. name : 트랜잭션이 적용될 메서드의 이름을 명시. *을 사용한 설정이 가능.
			                        예를 들어 "get*"으로 설정할 경우 이름이 get으로 시작하는 메소드를 의미.
			           "*get"은 인정되지 않는다.
			 2. propagation : (주의) 트랜잭션 전파 규칙을 설정(트랜잭션을 시작하거나 기존 트랜잭션에 참여하는 방법을 결정하는 속성)
			 3. isolation : (주의) 트랜잭션 격리 레벨을 설정
			 4. read-only : 읽기 전용 여부를 설정
			 5. no-rollback-for : 트랜잭션을 롤백하지 않을 예외 타입 설정
			 6. rollback-for : 트랜잭션을 롤백할 예외 타입을 설정
			 7. timeout : 트랜잭션의 제한시간을 초단위로 설정
		 -->
		<tx:attributes>
			<!-- 검색할 수 있는 범위를 *ServiceImpl 클래스로 한정시킴(아래 aop 설정) -->
			<tx:method name="insert*"/>
			<tx:method name="update*"/>
			<tx:method name="delete*"/>
			<tx:method name="select*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP 설정
		 완성된 <tx:advice>를 <aop:config에 주입하면 Spring의 자동 프록시 생성기가 어드바이저 단위로 검색해서 AOP를 적용
	 -->
	 <aop:config>
	 	<!-- 실제 Advice가 적용되는 Join Point가 Pointcut -->
	 	<!-- 표현식(expression) : 핵심 기능 검색 -->
	 	<aop:pointcut expression="execution(public * com.dalbodre.web..*ServiceImpl.*(..))" id="servicePublicMethod"/>
	 	<!-- Advisor : Pointcut과 Advice를 하나씩 갖고 있는 Object. AOP의 가장 기본이 되는 모튤 -->
	 	<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePublicMethod"/>
	 </aop:config>
	 
	 <!-- Mybatis 설정 : Spring과 연동하려면 Mybatis에서 제공해주는 API를 사용 -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource"/>
	 	<!-- value 값으로 명시된 package 아래의 모든 class를 스캔해서 bean 객체를 생성하고 자동 alias를 준다. 첫 글자가 소문자이고 쉼표로 나열해서 추가함 -->
	 	<property name="typeAliasesPackage" value="com.dalbodre.web.member.domain"/>
	 </bean>
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<!-- value 값으로 명시된 package 안에서 Mapper를 찾는다.
	 	     Mybatis는 내부에서 인터페이스를 인식해서 자동으로 class를 만들고 추상메서드를 구현한다.
	 	-->
	 	<property name="basePackage" value="com.dalbodre.web.member.dao"/>
	 </bean>
</beans>
